# -*- coding: utf-8 -*-

from __future__ import division
import time
start_time = time.time()

import random
import array

from deap import base
from deap import creator
from deap import tools

# Creation of fitness and Individual classes
creator.create("Fitness", base.Fitness, weights=(1.0, -1.0))
creator.create("Individual", array.array, typecode='d', fitness=creator.Fitness)

toolbox = base.Toolbox()

# Attribute definition

L_fen_MIN, L_fen_MAX = 0.1, 1.0
H_fen_MIN, H_fen_MAX = 0.1, 1.0
Zall_MIN, Zall_MAX = 0.1, 1.0
L_cas_MIN, L_cas_MAX = 0.1, 1.0
H_cas_MIN, H_cas_MAX = 0.1, 1.0

toolbox.register("largeur_fenetre", random.uniform, L_fen_MIN, L_fen_MAX)
toolbox.register("hauteur_fenetre", random.uniform, H_fen_MIN, H_fen_MAX)
toolbox.register("ZallegeFen", random.uniform, Zall_MIN, Zall_MAX)
toolbox.register("Longueur_casquette", random.uniform, L_cas_MIN, L_cas_MAX)
toolbox.register("Hauteur_casquette", random.uniform, H_cas_MIN, H_cas_MAX)

attr_list = []
attr_list.append(toolbox.largeur_fenetre)
attr_list.append(toolbox.hauteur_fenetre)
attr_list.append(toolbox.ZallegeFen)
attr_list.append(toolbox.Longueur_casquette)
attr_list.append(toolbox.Hauteur_casquette)

# Individuals generator

def generator (ind_class, attr_list) :
    ind = ind_class(attribute() for attribute in attr_list)
    return ind

toolbox.register("individual", generator, creator.Individual, attr_list)
toolbox.register("population", tools.initRepeat, list, toolbox.individual)

# definition of functions to minimize/maximize
def funcs_obj (individual):

    sum1 = sum(individual)
    sum2 = sum((individual[3], individual[4]))

    return sum1, sum2

# Operator registering
toolbox.register("evaluate", funcs_obj)
toolbox.register("mate", tools.cxSimulatedBinaryBounded, low=[L_fen_MIN, H_fen_MIN, Zall_MIN, L_cas_MIN, H_cas_MIN], up=[L_fen_MAX, H_fen_MAX, Zall_MAX, L_cas_MAX, H_cas_MAX], eta=10)
toolbox.register("mutate", tools.mutPolynomialBounded, low=[L_fen_MIN, H_fen_MIN, Zall_MIN, L_cas_MIN, H_cas_MIN], up=[L_fen_MAX, H_fen_MAX, Zall_MAX, L_cas_MAX, H_cas_MAX], eta=10.0, indpb=0.05)
toolbox.register("select", tools.selNSGA2)

def main():

    MU, LAMBDA = 20, 100
    #param MU: The number of individuals to select for the next generation.
    #param LAMBDA: The number of children to produce at each generation.
    population = toolbox.population(n=MU)    
    
    CXPB, MUTPB, NGEN = 0.5, 0.02, 80
    #param CXPB: The probability that an offspring is produced by crossover.
    #param MUTPB: The probability that an offspring is produced by mutation.
    #param NGEN: The number of generation.
    
    # Evaluate the individuals with an invalid fitness
    invalid_ind = [ind for ind in population if not ind.fitness.valid]
    fitnesses = toolbox.map(toolbox.evaluate, invalid_ind)
    for ind, fit in zip(invalid_ind, fitnesses):
        ind.fitness.values = fit

    all_pop = []
    # Begin the generational process

    for gen in range(1, NGEN + 1):
    
        all_pop.append(toolbox.select(population, MU))
        # add the population from the generation g in a list    
    
        # Vary the population
        assert (CXPB + MUTPB) <= 1.0, ("The sum of the crossover and mutation "
                                   "probabilities must be smaller or equal to 1.0.")
                                                
        offspring = []
        for _ in xrange(LAMBDA):
            op_choice = random.random()
            if op_choice < CXPB :            # Apply crossover
                ind1, ind2 = map(toolbox.clone, random.sample(population, 2))
                ind1, ind2 = toolbox.mate(ind1, ind2)
                del ind1.fitness.values
                offspring.append(ind1)
            elif op_choice < CXPB + MUTPB :  # Apply mutation
                indiv = toolbox.clone(random.choice(population))
                indiv, = toolbox.mutate(indiv)
                del indiv.fitness.values
                offspring.append(indiv)
            else:                           # Apply reproduction
                offspring.append(random.choice(population))

        # Evaluate the individuals with an invalid fitness
        invalid_ind = [ind for ind in offspring if not ind.fitness.valid]
        fitnesses = toolbox.map(toolbox.evaluate, invalid_ind)
        for ind, fit in zip(invalid_ind, fitnesses):
            ind.fitness.values = fit

        # Select the next generation population
        population[:] = toolbox.select(offspring + population, MU)
        
    print("End of evolution after %s generations" % NGEN)
    print(" MU = %s, LAMBDA = %s" %(MU, LAMBDA))     
    
    for num_pop in range(NGEN-1, NGEN) :    
    
        print("Population of the generation number %s :" % num_pop)
        for indiv in all_pop[num_pop] :
            print(indiv, indiv.fitness.values)
        
    print("Execution time : %s seconds ---" % (time.time() - start_time))
    
if __name__ == "__main__":
    main()   
