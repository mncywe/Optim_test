# -*- coding: utf-8 -*-

from __future__ import division

import time
start_time = time.time()

import random
import array

from deap import base
from deap import creator
from deap import tools

MainPath="C:\\Simulation\\optimPythonPhase2\\"
execfile(MainPath+"def_functions.py")
from def_functions import ModelEval, varOr

# Creation of fitness and Indivual classes
creator.create("FitnessMin", base.Fitness, weights=(-1.0, -1.0))
creator.create("Individual", array.array, typecode='d', fitness=creator.FitnessMin)

toolbox = base.Toolbox()

# Attribute definition

L_fen_MIN, L_fen_MAX = 0.1, 3.0
H_fen_MIN, H_fen_MAX = 0.1, 2.5
Zall_MIN, Zall_MAX = 0.1, 1.0
L_cas_MIN, L_cas_MAX = 0.1, 3.0
H_cas_MIN, H_cas_MAX = 1.0, 3.0

toolbox.register("largeur_fenetre", random.uniform, L_fen_MIN, L_fen_MAX)
toolbox.register("hauteur_fenetre", random.uniform, H_fen_MIN, H_fen_MAX)
toolbox.register("ZallegeFen", random.uniform, Zall_MIN, Zall_MAX)
toolbox.register("Longueur_casquette", random.uniform, L_cas_MIN, L_cas_MAX)
toolbox.register("Hauteur_casquette", random.uniform, H_cas_MIN, H_cas_MAX)

attr_list = []
attr_list.append(toolbox.largeur_fenetre)
attr_list.append(toolbox.hauteur_fenetre)
attr_list.append(toolbox.ZallegeFen)
attr_list.append(toolbox.Longueur_casquette)
attr_list.append(toolbox.Hauteur_casquette)

# Individuals generator
def generator (ind_class, attr_list) :
    ind = ind_class(attribute() for attribute in attr_list)
    return ind

toolbox.register("individual", generator, creator.Individual, attr_list)
toolbox.register("population", tools.initRepeat, list, toolbox.individual)

# definition of functions to minimize
def funcs_obj (individual):

    transpose = ModelEval(*individual).T
    result = tuple(map(tuple, transpose.values))
    Values_obj1 = result[0]
    Values_obj2 = result[1]
    return sum(Values_obj1), sum(Values_obj2)

# Operator registering
toolbox.register("evaluate", funcs_obj)
toolbox.register("mate", tools.cxUniform, indpb=0.1)
toolbox.register("mutate", tools.mutFlipBit, indpb=0.05)
toolbox.register("select", tools.selTournament, tournsize=3)

pop_init = toolbox.population(n=6)

def main(seed=None):
    random.seed(seed)

    MU, LAMBDA = 6, 6
    CXPB, MUTPB, NGEN = 0.5, 0.2, 4
    
    stats=None
    halloffame=None
    verbose=__debug__
    
    logbook = tools.Logbook()
    logbook.header = ['gen', 'nevals'] + (stats.fields if stats else [])

    # Evaluate the individuals with an invalid fitness
    invalid_ind = [ind for ind in population if not ind.fitness.valid]
    fitnesses = toolbox.map(toolbox.evaluate, invalid_ind)
    for ind, fit in zip(invalid_ind, fitnesses):
        ind.fitness.values = fit

    if halloffame is not None:
        halloffame.update(population)

    record = stats.compile(population) if stats is not None else {}
    logbook.record(gen=0, nevals=len(invalid_ind), **record)
    if verbose:
        print logbook.stream

    all_pop = []
    # Begin the generational process

    for gen in range(1, NGEN + 1):
    
        all_pop.append(toolbox.select(population, MU))
  
        # Vary the population
        offspring = varOr(population, toolbox, LAMBDA, CXPB, MUTPB)

        # Evaluate the individuals with an invalid fitness
        invalid_ind = [ind for ind in offspring if not ind.fitness.valid]
        fitnesses = toolbox.map(toolbox.evaluate, invalid_ind)
        for ind, fit in zip(invalid_ind, fitnesses):
            ind.fitness.values = fit

        if halloffame is not None:
            halloffame.update(offspring)

        # Select the next generation population
        population[:] = toolbox.select(offspring, MU)
        
        record = stats.compile(population) if stats is not None else {}
        logbook.record(gen=gen, nevals=len(invalid_ind), **record)
        if verbose:
            print logbook.stream
        
    print("-- End of evolution --")
    
    for ind in pop_init :
        print ind
    
    for num_pop in range(NGEN) :    
    
        print("Population of the generation number %s :" % num_pop)
        for indiv in all_pop[num_pop] :
            print(indiv, indiv.fitness.values)
    
    print("Execution time : %s seconds ---" % (time.time() - start_time))
    
if __name__ == "__main__":
    main()
