# -*- coding: utf-8 -*-

from __future__ import division
import os
import sys
import itertools
import time
start_time = time.time()

import random
import array
from deap import base
from deap import creator
from deap import tools

MainPath="C:\\Simulation\\optimPythonPhase2\\"
execfile(MainPath+"def_functions.py")
from def_functions import ModelEval

# Creation of fitness and Indivual classes
creator.create("FitnessMin", base.Fitness, weights=(-1.0, -1.0))
creator.create("Individual", array.array, typecode='d', fitness=creator.FitnessMin)

toolbox = base.Toolbox()

# Attribute generator

L_fen_MIN, L_fen_MAX = 0.1, 3.0
H_fen_MIN, H_fen_MAX = 0.1, 2.5
Zall_MIN, Zall_MAX = 0.1, 1.0
L_cas_MIN, L_cas_MAX = 0.1, 3.0
H_cas_MIN, H_cas_MAX = 1.0, 3.0

toolbox.register("largeur_fenetre", random.uniform, L_fen_MIN, L_fen_MAX)
toolbox.register("hauteur_fenetre", random.uniform, H_fen_MIN, H_fen_MAX)
toolbox.register("ZallegeFen", random.uniform, Zall_MIN, Zall_MAX)
toolbox.register("Longueur_casquette", random.uniform, L_cas_MIN, L_cas_MAX)
toolbox.register("Hauteur_casquette", random.uniform, H_cas_MIN, H_cas_MAX)

# Structure initializers
toolbox.register("individual", tools.initCycle, creator.Individual,
                 (toolbox.largeur_fenetre, toolbox.hauteur_fenetre,
                  toolbox.ZallegeFen, toolbox.Longueur_casquette, 
                  toolbox.Hauteur_casquette), n=1)
toolbox.register("population", tools.initRepeat, list, toolbox.individual)

# definition of functions to minimize
def funcs_obj (individual):

    transpose = ModelEval(*individual).T
    result = tuple(map(tuple, transpose.values))
    Values_obj1 = result[0]
    Values_obj2 = result[1]
    return sum(Values_obj1), sum(Values_obj2)

# Operator registering
toolbox.register("evaluate", funcs_obj)
toolbox.register("mate", tools.cxSimulatedBinary, eta=1.0)
toolbox.register("mutate", tools.mutFlipBit, indpb=0.05)
toolbox.register("select", tools.selNSGA2)


# Population creation
def main():
    pop = toolbox.population(n=4)
    CXPB, MUTPB, NGEN = 0.5, 0.2, 4
# Population evaluation
    fitnesses = list(map(toolbox.evaluate, pop))
    for ind, fit in zip(pop, fitnesses):
        ind.fitness.values = fit

# Begin the evolution
    all_pop = []
    
    for g in range(NGEN):
        
        # Select the next generation individuals
        offspring = toolbox.select(pop, len(pop))
        # Clone the selected individuals
        offspring = list(map(toolbox.clone, offspring))
        
        # Apply crossover and mutation on the offspring
        for child1, child2 in zip(offspring[::2], offspring[1::2]):
            if random.random() < CXPB:
                toolbox.mate(child1, child2)
                del child1.fitness.values
                del child2.fitness.values

        for mutant in offspring:
            if random.random() < MUTPB:
                toolbox.mutate(mutant)
                del mutant.fitness.values

        # Evaluate the individuals with an invalid fitness
        invalid_ind = [ind for ind in offspring if not ind.fitness.valid]
        fitnesses = map(toolbox.evaluate, invalid_ind)
        for ind, fit in zip(invalid_ind, fitnesses):
            ind.fitness.values = fit

       # The population is entirely replaced by the offspring
        pop[:] = offspring
        
        all_pop.append(pop)
        
    print("-- End of evolution --")
    
    for num_pop in range(NGEN):    
    
        print("Population of the generation number %s :" % num_pop)
        for indiv in all_pop[num_pop] :
            print(indiv, indiv.fitness.values)
    
    print("Time to execute the programm : %s seconds ---" % (time.time() - start_time))
    
if __name__ == "__main__":
    main()
